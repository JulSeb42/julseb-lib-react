import { CodeContainer } from "../../../"
import type {} from "../../../types"
import type { ILibCodeContainer } from "../../../types/components-props"
import type { ComponentPreview } from "../../../../data/components"

const code =
	'const [isOpen, setIsOpen] = useState(false)\n\nreturn (\n\t<>\n\t\t<Button onClick={() => setIsOpen(!isOpen)}>Open modal</Button>\n\t\t<div className={clsx("top-0 left-0 fixed bg-overlay-black-50 w-full h-svh", isOpen ? "visible" : "invisible")}>\n\t\t\t...\n\t\t</div>\n\t</>\n)'

export const codeContainerPreview: ComponentPreview<ILibCodeContainer> = {
	name: "Code Container",
	component: CodeContainer,
	category: "components",
	import: "CodeContainer", // import Component (ex: Skeleton)
	additionalImports: [], // import OtherComponent (ex: SkeletonCard)
	optionalImports: [], // import ComponentItem (ex: AccordionItem) => to build with children instead of prop on component
	propsImport: "ILibCodeContainer", // import ILibComponent (ex: ILibAccordion)
	additionalTypeImports: [], // import LibComponentItem (ex: LibAccordionItem)
	extends: ["HTMLDivElement"],
	previews: [
		{
			props: {
				highlighterProps: { language: "typescript" },
				children: code,
			},
		},
	],
	props: [
		{
			name: "highlighterProps",
			type: "string",
			possibleValues: [
				"oneC (1c)",
				"abnf",
				"accesslog",
				"actionscript",
				"ada",
				"angelscript",
				"apache",
				"applescript",
				"arcade",
				"arduino",
				"armasm",
				"asciidoc",
				"aspectj",
				"autohotkey",
				"autoit",
				"avrasm",
				"awk",
				"axapta",
				"bash",
				"basic",
				"bnf",
				"brainfuck",
				"cLike (c-like)",
				"c",
				"cal",
				"capnproto",
				"ceylon",
				"clean",
				"clojureRepl (clojure-repl)",
				"clojure",
				"cmake",
				"coffeescript",
				"coq",
				"cos",
				"cpp",
				"crmsh",
				"crystal",
				"csharp",
				"csp",
				"css",
				"d",
				"dart",
				"delphi",
				"diff",
				"django",
				"dns",
				"dockerfile",
				"dos",
				"dsconfig",
				"dts",
				"dust",
				"ebnf",
				"elixir",
				"elm",
				"erb",
				"erlangRepl (erlang-repl)",
				"erlang",
				"excel",
				"fix",
				"flix",
				"fortran",
				"fsharp",
				"gams",
				"gauss",
				"gcode",
				"gherkin",
				"glsl",
				"gml",
				"go",
				"golo",
				"gradle",
				"groovy",
				"haml",
				"handlebars",
				"haskell",
				"haxe",
				"hsp",
				"htmlbars",
				"http",
				"hy",
				"inform7",
				"ini",
				"irpf90",
				"isbl",
				"java",
				"javascript",
				"jbossCli (jboss-cli)",
				"json",
				"juliaRepl (julia-repl)",
				"julia",
				"kotlin",
				"lasso",
				"latex",
				"ldif",
				"leaf",
				"less",
				"lisp",
				"livecodeserver",
				"livescript",
				"llvm",
				"lsl",
				"lua",
				"makefile",
				"markdown",
				"mathematica",
				"matlab",
				"maxima",
				"mel",
				"mercury",
				"mipsasm",
				"mizar",
				"mojolicious",
				"monkey",
				"moonscript",
				"n1ql",
				"nginx",
				"nim",
				"nix",
				"nodeRepl (node-repl)",
				"nsis",
				"objectivec",
				"ocaml",
				"openscad",
				"oxygene",
				"parser3",
				"perl",
				"pf",
				"pgsql",
				"phpTemplate (php-template)",
				"php",
				"plaintext",
				"pony",
				"powershell",
				"processing",
				"profile",
				"prolog",
				"properties",
				"protobuf",
				"puppet",
				"purebasic",
				"pythonRepl (python-repl)",
				"python",
				"q",
				"qml",
				"r",
				"reasonml",
				"rib",
				"roboconf",
				"routeros",
				"rsl",
				"ruby",
				"ruleslanguage",
				"rust",
				"sas",
				"scala",
				"scheme",
				"scilab",
				"scss",
				"shell",
				"smali",
				"smalltalk",
				"sml",
				"sqf",
				"sql",
				"sqlMore (sql_more)",
				"stan",
				"stata",
				"step21",
				"stylus",
				"subunit",
				"swift",
				"taggerscript",
				"tap",
				"tcl",
				"thrift",
				"tp",
				"twig",
				"typescript",
				"vala",
				"vbnet",
				"vbscriptHtml (vbscript-html)",
				"vbscript",
				"verilog",
				"vhdl",
				"vim",
				"x86asm",
				"xl",
				"xml",
				"xquery",
				"yaml",
				"zephir",
			],
			defaultValue: null,
			description:
				"Additional props to pass to the syntax highlighter, including language selection.",
			isRequired: false,
		},
		{
			name: "textColor",
			type: "string",
			possibleValues: "Any color from the library",
			defaultValue: null,
			description: "Text color for the code content.",
			isRequired: false,
		},
		{
			name: "backgroundColor",
			type: "string",
			possibleValues: "Any color from the library",
			defaultValue: null,
			description: "Background color for the code content.",
			isRequired: false,
		},
		{
			name: "style",
			type: "CSSProperties",
			possibleValues: [],
			defaultValue: null,
			description: "Custom styles for the syntax highlighter.",
			isRequired: false,
		},
		{
			name: "hideCopyButton",
			type: "boolean",
			possibleValues: [],
			defaultValue: "false",
			description: "Whether to hide the copy to clipboard button.",
			isRequired: false,
		},
		{
			name: "tooltipTexts",
			type: "Object",
			possibleValues: [],
			defaultValue: null,
			description:
				"Custom tooltip texts for copy button states. Only available when hideCopyButton is false.",
			isRequired: false,
		},
		{
			name: "icons",
			type: "Object",
			possibleValues: [],
			defaultValue: "copy: BiClipboard, copied: BiCheck",
			description:
				"Custom icons for copy button states. Only available when hideCopyButton is false.",
			isRequired: false,
		},
	],
}
